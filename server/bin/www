#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const db = require('../libs/database');
const ws = require('../libs/websocket');

const http = require('http');
const amqp = require('amqplib/callback_api');

const pg = require('pg');
const pool = new pg.Pool({
  user: 'postgres',
  database: 'epsilontelemetrydb',
  password: 'root',
  port: 5432,
});

const debug = require('debug');

/**
 * Get port from environment and store in Express.
 */
const port = process.env.PORT || 4000;
app.set('port', port);

/**
 * Create HTTP server and setup websocket
 */
const server = http.createServer(app);
ws.socketSetupAndListen(server);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', function(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});
server.on('listening', onListening);

/**
 * Get column names and store in global variable
 */
console.log('Updating column names...');
let columnNames = '';
pool.connect(function(err, client, done) {
  if (err) {
    return console.error('Cannot connect to PostgreSQL', err.stack);
  }
  const query = 'SELECT column_name FROM information_schema.columns ' +
                'WHERE table_schema = \'public\' AND table_name = \'packet\'';
  client.query(query, function(err, result) {
    done();
    if (err) {
      return console.error('Error while updating column name', err.stack);
    }

    // build column name list and remove trailing comma and whitespace
    for (let i = 1; i < result.rows.length; i++) {
      columnNames += result.rows[i].column_name + ', ';
    }
    columnNames = columnNames.replace(/,\s*$/, '');
  });
});
console.log('Column names updated');

/**
 * Setup the AMQP channel with RabbitMQ (change host if needed)
 */
const rmqport = '5672';
amqp.connect('amqp://localhost:' + rmqport, function(err, conn) {
  try {
    conn.createChannel(function(err, ch) {
      // exchange name must be hermesExchange
      const q = 'msgQueue';
      const ex = 'hermesExchange';

      // check if queue is valid and wait for messages
      ch.assertExchange(ex, 'fanout', {durable: false});
      ch.assertQueue(q, {durable: false});
      ch.bindQueue(q.queue, ex, '');

      console.log('Express: waiting for messages in %s', q);
      ch.consume(q, function(msg) {
        const jsonObj = JSON.parse(msg.content);

        // connect to dattabase and insert data
        pool.connect(function(err, client, done) {
          if (err) {
            return console.error('Cannot connect to PostgreSQL', err.stack);
          }
          const query = 'INSERT INTO packet(' + columnNames + ') ' +
                        'values(' + db.mapJsonToColumns(jsonObj) + ')';
          client.query(query, function(err, result) {
            done();
            if (err) {
              return console.error('Error while inserting into database', err.stack);
            }
            console.log('1 row inserted from RabbitMQ');
          });
        });
      }, {noAck: true});
    });
  } catch (e) {
    if (e instanceof TypeError) {
      console.error('Cannot create channel. Are you sure ' +
                    'RabbitMQ is running on port ' + rmqport + '?');
      process.exit(1);
    }
  }
});

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  const mode = app.get('env');
  debug('Listening on ' + bind + ' in ' + mode + ' mode');
}

module.exports.pg_pool = pool;
