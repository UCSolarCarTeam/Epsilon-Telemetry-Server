exports.up = function(knex) {
  return knex.schema.createTable('telemetry', function(table) {
    table.bigIncrements('id').primary();
    table.dateTime('timeStamp').notNullable().defaultTo(knex.fn.now());
    table.text('name').notNullable().defaultTo('Solar Car Epsilon');
    table.boolean('motor0Alive');
    table.float('motor0SetCurrent');
    table.float('motor0SetVelocity');
    table.float('motor0BusCurrent');
    table.float('motor0BusVoltage');
    table.float('motor0VehicleVelocity');
    table.float('motor0PhaseCCurrent');
    table.float('motor0PhaseBCurrent');
    table.float('motor0MotorVoltageReal');
    table.float('motor0MotorVoltageImaginary');
    table.float('motor0MotorCurrentReal');
    table.float('motor0MotorCurrentImaginary');
    table.float('motor0BackEmfReal');
    table.float('motor0VoltageRail15VSupply');
    table.float('motor0VoltageRail3VSupply');
    table.float('motor0VoltageRail1VSupply');
    table.float('motor0HeatSinkTemp');
    table.float('motor0MotorTemp');
    table.float('motor0DspBoardTemp');
    table.float('motor0DcBusAmpHours');
    table.float('motor0Odometer');
    table.float('motor0SlipSpeed');
    table.boolean('motor1Alive');
    table.float('motor1SetCurrent');
    table.float('motor1SetVelocity');
    table.float('motor1BusCurrent');
    table.float('motor1BusVoltage');
    table.float('motor1VehicleVelocity');
    table.float('motor1PhaseCCurrent');
    table.float('motor1PhaseBCurrent');
    table.float('motor1MotorVoltageReal');
    table.float('motor1MotorVoltageImaginary');
    table.float('motor1MotorCurrentReal');
    table.float('motor1MotorCurrentImaginary');
    table.float('motor1BackEmfReal');
    table.float('motor1VoltageRail15VSupply');
    table.float('motor1VoltageRail3VSupply');
    table.float('motor1VoltageRail1VSupply');
    table.float('motor1HeatSinkTemp');
    table.float('motor1MotorTemp');
    table.float('motor1DspBoardTemp');
    table.float('motor1DcBusAmpHours');
    table.float('motor1Odometer');
    table.float('motor1SlipSpeed');
    table.boolean('driverControlsAlive');
    table.boolean('headlightsOff');
    table.boolean('headlightsLow');
    table.boolean('headlightsHigh');
    table.boolean('signalRight');
    table.boolean('signalLeft');
    table.boolean('hazard');
    table.boolean('interior');
    table.boolean('aux');
    table.boolean('volumeUp');
    table.boolean('volumeDown');
    table.boolean('nextSong');
    table.boolean('prevSong');
    table.float('acceleration');
    table.float('regenBraking');
    table.boolean('brakes');
    table.boolean('controlsForward');
    table.boolean('controlsReverse');
    table.boolean('pushToTalk');
    table.boolean('horn');
    table.boolean('controlsMotorReset');
    table.boolean('motor0OverSpeedError');
    table.boolean('motor0SoftwareOverCurrentError');
    table.boolean('motor0DcBusOverVoltageError');
    table.boolean('motor0BadMotorPositionHallSequenceError');
    table.boolean('motor0WatchdogCausedLastResetError');
    table.boolean('motor0ConfigReadErrorError');
    table.boolean('motor0Rail15VUnderVoltageLockOutError');
    table.boolean('motor0DesaturationFaultError');
    table.boolean('motor0OutputVoltagePwmLimit');
    table.boolean('motor0CurrentLimit');
    table.boolean('motor0VelocityLimit');
    table.boolean('motor0BusCurrentLimit');
    table.boolean('motor0BusVoltageUpperLimit');
    table.boolean('motor0BusVoltageLowerLimit');
    table.boolean('motor0IpmOrMotorTemperatureLimit');
    table.integer('motor0RxErrorCount').unsigned();
    table.integer('motor0TxErrorCount').unsigned();
    table.boolean('motor1OverSpeedError');
    table.boolean('motor1SoftwareOverCurrentError');
    table.boolean('motor1DcBusOverVoltageError');
    table.boolean('motor1BadMotorPositionHallSequenceError');
    table.boolean('motor1WatchdogCausedLastResetError');
    table.boolean('motor1ConfigReadErrorError');
    table.boolean('motor1Rail15VUnderVoltageLockOutError');
    table.boolean('motor1DesaturationFaultError');
    table.boolean('motor1OutputVoltagePwmLimit');
    table.boolean('motor1CurrentLimit');
    table.boolean('motor1VelocityLimit');
    table.boolean('motor1BusCurrentLimit');
    table.boolean('motor1BusVoltageUpperLimit');
    table.boolean('motor1BusVoltageLowerLimit');
    table.boolean('motor1IpmOrMotorTemperatureLimit');
    table.integer('motor1RxErrorCount').unsigned();
    table.integer('motor1TxErrorCount').unsigned();
    table.boolean('internalCommunicationFault');
    table.boolean('internalConversionFault');
    table.boolean('weakCellFault');
    table.boolean('lowCellVoltageFault');
    table.boolean('openWiringFault');
    table.boolean('currentSensorFault');
    table.boolean('packVoltageSensorFault');
    table.boolean('weakPackFault');
    table.boolean('voltageRedundancyFault');
    table.boolean('fanMonitorFault');
    table.boolean('thermistorFault');
    table.boolean('canBusCommunicationsFault');
    table.boolean('alwaysOnSupplyFault');
    table.boolean('highVoltageIsolationFault');
    table.boolean('12vPowerSupplyFault');
    table.boolean('chargeLimitEnforcementFault');
    table.boolean('dischargeLimitEnforcementFault');
    table.boolean('chargerSafetyRelayFault');
    table.boolean('internalMemoryFault');
    table.boolean('internalThermistorFault');
    table.boolean('internalLogicFault');
    table.boolean('dclReducedDueToLowSoc');
    table.boolean('dclReducedDueToHighCellResistance');
    table.boolean('dclReducedDueToTemperature');
    table.boolean('dclReducedDueToLowCellVoltage');
    table.boolean('dclReducedDueToLowPackVoltage');
    table.boolean('dclandCclReducedDueToVoltageFailsafe');
    table.boolean('dclandCclReducedDueToCommunicationFailsafe');
    table.boolean('cclReducedDueToHighSoc');
    table.boolean('cclReducedDueToHighCellResistance');
    table.boolean('cclReducedDueToTemperature');
    table.boolean('cclReducedDueToHighCellVoltage');
    table.boolean('cclReducedDueToHighPackVoltage');
    table.boolean('cclReducedDueToChargerLatch');
    table.boolean('cclReducedDueToAlternateCurrentLimit');
    table.boolean('batteryAlive');
    table.integer('populatedCells');
    table.boolean('dischargeRelayEnabled');
    table.boolean('chargeRelayEnabled');
    table.boolean('chargerSafetyEnabled');
    table.boolean('malfunctionIndicatorActive');
    table.boolean('multiPurposeInputSignalStatus');
    table.boolean('alwaysOnSignalStatus');
    table.boolean('isReadySignalStatus');
    table.boolean('isChargingSignalStatus');
    table.float('12vInputVoltage');
    table.float('fanVoltage');
    table.float('packCurrent');
    table.float('packVoltage');
    table.float('packStateOfCharge');
    table.float('packAmphours');
    table.float('packDepthOfDischarge');
    table.integer('highTemperature');
    table.integer('highThermistorId');
    table.integer('lowTemperature');
    table.integer('lowThermistorId');
    table.integer('averageTemperature');
    table.integer('internalTemperature');
    table.integer('fanSpeed');
    table.integer('requestedFanSpeed');
    table.integer('lowCellVoltage');
    table.integer('lowCellVoltageId');
    table.integer('highCellVoltage');
    table.integer('highCellVoltageId');
    table.integer('averageCellVoltage');
    table.enum('prechargeState', [
      'Error',
      'Idle',
      'Enable Pack',
      'Measure',
      'Precharge',
      'Run',
    ]);
    table.integer('auxVoltage');
    table.boolean('auxBmsAlive');
    table.boolean('mppt0Alive');
    table.float('mppt0ArrayVoltage');
    table.float('mppt0ArrayCurrent');
    table.float('mppt0BatteryVoltage');
    table.float('mppt0Temperature');
    table.boolean('mppt1Alive');
    table.float('mppt1ArrayVoltage');
    table.float('mppt1ArrayCurrent');
    table.float('mppt1BatteryVoltage');
    table.float('mppt1Temperature');
    table.boolean('mppt2Alive');
    table.float('mppt2ArrayVoltage');
    table.float('mppt2ArrayCurrent');
    table.float('mppt2BatteryVoltage');
    table.float('mppt2Temperature');
    table.boolean('mppt3Alive');
    table.float('mppt3ArrayVoltage');
    table.float('mppt3ArrayCurrent');
    table.float('mppt3BatteryVoltage');
    table.float('mppt3Temperature');
    table.boolean('lowBeams');
    table.boolean('highBeams');
    table.boolean('brakeLights');
    table.boolean('leftSignal');
    table.boolean('rightSignal');
    table.boolean('bmsStrobeLight');
    table.boolean('lightsAlive');
  });
};

exports.down = function(knex) {
  return knex.schema.dropTable('telemetry');
};
